{"version":3,"sources":["constants.js","App.js","serviceWorker.js","index.js"],"names":["moods","foods","App","useState","generatedName","setGeneratedName","rng","list","Math","floor","random","length","generateName","a","b","name","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wQAAaA,G,MAAQ,CACnB,SACA,WACA,OACA,WACA,UACA,SACA,WACA,YACA,UACA,SACA,QACA,OACA,QACA,SACA,SACA,SACA,aACA,WACA,QACA,cACA,QACA,UACA,YACA,MACA,SACA,YACA,UACA,aACA,SACA,SACA,SACA,cACA,YACA,aACA,cACA,WACA,WACA,MACA,WACA,UAGWC,EAAQ,CACnB,OACA,WACA,WACA,WACA,SACA,YACA,SACA,SACA,kBACA,UACA,UACA,SACA,WACA,eACA,SACA,SACA,QACA,UACA,SACA,MACA,YACA,SACA,eACA,eACA,UACA,WACA,QCjCaC,EAhCH,WAAO,IAAD,EAC0BC,mBAAS,MADnC,mBACTC,EADS,KACMC,EADN,KAEVC,EAAM,SAAAC,GACV,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,EAAKI,UAG9CC,EAAe,WACnB,IAAMC,EAAIP,EAAIN,GACRc,EAAIR,EAAIL,GACRc,EAAI,UAAMf,EAAMa,GAAZ,YAAkBZ,EAAMa,IAClCT,EAAiBU,IAGnB,OACE,yBAAKC,UAAU,qBACM,OAAlBZ,EACC,0BAAMY,UAAU,gBAAgBC,QAAS,kBAAML,MAC5C,sBAGH,oCACE,0BAAMI,UAAU,oBAAhB,uBACA,0BAAMA,UAAU,iBAAiBZ,GACjC,0BAAMY,UAAU,gBAAgBC,QAAS,kBAAML,MAC5C,4BCjBOM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2ffb7e42.chunk.js","sourcesContent":["export const moods = [\n  \"Amused\",\n  \"Blissful\",\n  \"Calm\",\n  \"Cheerful\",\n  \"Content\",\n  \"Dreamy\",\n  \"Ecstatic\",\n  \"Energetic\",\n  \"Excited\",\n  \"Flirty\",\n  \"Giddy\",\n  \"Good\",\n  \"Happy\",\n  \"Joyful\",\n  \"Loving\",\n  \"Mellow\",\n  \"Optimistic\",\n  \"Peaceful\",\n  \"Silly\",\n  \"Sympathetic\",\n  \"Angry\",\n  \"Annoyed\",\n  \"Apathetic\",\n  \"Bad\",\n  \"Cranky\",\n  \"Depressed\",\n  \"Envious\",\n  \"Frustrated\",\n  \"Gloomy\",\n  \"Grumpy\",\n  \"Guilty\",\n  \"Indifferent\",\n  \"Irritated\",\n  \"Melancholy\",\n  \"Pessimistic\",\n  \"Rejected\",\n  \"Restless\",\n  \"Sad\",\n  \"Stressed\",\n  \"Weird\"\n];\n\nexport const foods = [\n  \"Corn\",\n  \"Mushroom\",\n  \"Broccoli\",\n  \"Cucumber\",\n  \"Pepper\",\n  \"Pineapple\",\n  \"Tomato\",\n  \"Carrot\",\n  \"Brussels sprout\",\n  \"Pumpkin\",\n  \"Cabbage\",\n  \"Potato\",\n  \"Eggplant\",\n  \"Sweet potato\",\n  \"Turnip\",\n  \"chilli\",\n  \"Onion\",\n  \"Lettuce\",\n  \"Radish\",\n  \"Pea\",\n  \"Asparagus\",\n  \"Celery\",\n  \"Green pepper\",\n  \"French beans\",\n  \"Spinach\",\n  \"Beetroot\",\n  \"Bean\"\n];\n","import React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport { moods, foods } from '../src/constants';\n\nconst App = () => {\n  const [generatedName, setGeneratedName] = useState(null);\n  const rng = list => {\n    return Math.floor(Math.random() * Math.floor(list.length));\n  };\n\n  const generateName = () => {\n    const a = rng(moods);\n    const b = rng(foods);\n    const name = `${moods[a]} ${foods[b]}`;\n    setGeneratedName(name);\n  };\n\n  return (\n    <div className=\"landing-container\">\n      {generatedName === null ? (\n        <span className=\"custom-button\" onClick={() => generateName()}>\n          {\"Generate your name\"}\n        </span>\n      ) : (\n        <>\n          <span className=\"landing-pre-text\">Your random name is</span>\n          <span className=\"landing-title\">{generatedName}</span>\n          <span className=\"custom-button\" onClick={() => generateName()}>\n            {\"Generate another name\"}\n          </span>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}